/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package puzzle;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class App {

    private List<Bits> readNumbers(Path file) {
        try {
            return Files.lines(file)
                    .filter(s -> s != null && !s.isEmpty())
                    .map(Bits::valueOf)
                    .collect(Collectors.toList());
        } catch (IOException e) {
            e.printStackTrace();
            throw new IllegalStateException("Couldn't read the file", e);
        }
    }

    public PowerConsumption findPowerConsumption(String resourceName) {
        var tmpDir = AppUtil.createTempDirectory();
        try {
            var inputFile = AppUtil.writeResourceToFile(tmpDir, resourceName);
            var reportLines = readNumbers(inputFile);
            var gamma = findGamma(reportLines);
            var epsilon = findEpsilon(reportLines);
            return new PowerConsumption(gamma, epsilon);
        } finally {
            AppUtil.deleteDirectoryAndChildren(tmpDir);
        }
    }

    /**
     * Find the most frequently occurring bit in each position and
     * return those bits.
     */
    private Bits findGamma(List<Bits> reportLines) {
        int numberOfBits = reportLines.get(0).length();
        StringBuilder chars = new StringBuilder();
        IntStream.range(0, numberOfBits)
                .forEachOrdered(i -> chars.insert(0, mostCommonChar(i, reportLines)));
        return Bits.valueOf(chars.toString());
    }

    private char mostCommonChar(int index, List<Bits> reportLines) {
        var counts = countCharsAt(index, reportLines);
        var ones = counts.get('1');
        var zeroes = counts.get('0');
        if (ones == null) {
            ones = 0L;
        }
        if (zeroes == null) {
            zeroes = 0L;
        }
        return zeroes >= ones ? '0' : '1';
    }

    private char mostUncommonChar(int index, List<Bits> reportLines) {
        var counts = countCharsAt(index, reportLines);
        var ones = counts.get('1');
        var zeroes = counts.get('0');
        if (ones == null) {
            ones = 0L;
        }
        if (zeroes == null) {
            zeroes = 0L;
        }
        return zeroes <= ones ? '0' : '1';
    }

    private Map<Character, Long> countCharsAt(int index, List<Bits> reportLines) {
        return reportLines
                .stream()
                .map(b -> b.charAt(index))
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
    }

    /**
     * Find the least frequently occurring bit in each position and
     * return those bits.
     */
    private Bits findEpsilon(List<Bits> reportLines) {
        int numberOfBits = reportLines.get(0).length();
        StringBuilder chars = new StringBuilder();
        IntStream.range(0, numberOfBits)
                .forEachOrdered(i -> chars.insert(0, mostUncommonChar(i, reportLines)));
        return Bits.valueOf(chars.toString());
    }

    public static void main(String[] args) {
        PowerConsumption consumption = new App().findPowerConsumption("/input.txt");
        System.out.printf("Power consumption elements = %s%n", consumption);
        System.out.printf("Power consumption = %d%n", consumption.value());
    }

}
