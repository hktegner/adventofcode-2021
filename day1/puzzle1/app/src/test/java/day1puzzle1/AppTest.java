/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package day1puzzle1;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

class AppTest {

    private static Path rootDir;

    public static Stream<Arguments> increasesTestData() {
        return Stream.of(
                Arguments.of("/test_input_1number.txt", 0),
                Arguments.of("/test_input_4decreases.txt", 0),
                Arguments.of("/test_input_4increases.txt", 4),
                Arguments.of("/test_input_no_numbers.txt", 0)
        );
    }

    @ParameterizedTest
    @MethodSource("increasesTestData")
    void increases(String resourceName, int expectedIncreases) {
        var app = new App();
        var file = writeResourceToFile(resourceName);
        assertEquals(expectedIncreases, app.increases(file));
    }

    private Path writeResourceToFile(String resourceName) {
        try {
            var file = Path.of(rootDir.toString(), resourceName);
            var resourceStream = getClass().getResourceAsStream(resourceName);
            if (resourceStream == null) {
                throw new IllegalStateException("Failed to read resource " + resourceName);
            }
            Files.write(file, resourceStream.readAllBytes());
            return file;
        } catch (IOException | NullPointerException e) {
            throw new IllegalArgumentException("Failed to write resource to disk", e);
        }
    }

    @BeforeAll
    static void setup() {
        try {
            rootDir = Files.createTempDirectory("aoc-2021-day1puzzle1");
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }

    @AfterAll
    static void tearDown() {
        assertTrue(rootDir.toFile().delete());
    }

}
